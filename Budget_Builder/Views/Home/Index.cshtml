@{
    ViewData["Title"] = "Home Page";
}

<div id="delete-category" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <img src="../images/toppng.com-warning-icon-2400x2400.png" width="50px" alt="">
                    <p>Are you sure you want to Delete this category?</p>
                    <input type="hidden" id="cat-index">
                    <input type="hidden" id="is-income">

                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-primary" onclick="deleteCategory()">Yes</a>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>



<div class="row p-3 ">
    <div class="input-div bg-white p-2">
        <div class="title-text text-primary fs-3 fw-semibold">Budget Calculator</div>
        <div class="d-flex justify-content-start">
            <div class="form-floating me-3">
                <input type="date" id="startDate" placeholder="Start date" class="m-2 w-100 form-control p-2 ">
                <label for="startDate"> start Date</label>
            </div>
            <div class="form-floating me-3">
                <input type="date" id="endDate" class="m-2 w-100 form-control p-2 " placeholder="End date">
                <label for="endDate">end Date</label>
            </div>
            <div class="btn btn-primary m-2 d-flex align-items-center" onclick="Generate()">Generate</div>
            <div class="btn btn-secondary m-2 d-flex align-items-center" onclick="resetSheet()">Reset</div>
            <div class="btn btn-secondary m-2 d-flex align-items-center">Export</div>

        </div>
    </div>

    <div class="data-entries bg-white mt-4">
        <div id="Budget-Sheet-data" class="table-responsive">

        </div>
    </div>

</div>

@section Scripts {
    <script>
        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;
        var MonthsArr = [];
        var DemoLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var DatasheetVM;

        //check validation of dates input and call generate sheet
        function Generate() {
            startDate = document.getElementById("startDate").value;
            endDate = document.getElementById("endDate").value;

            if (!startDate || !endDate) {
                errorToaster("Please select both start and end dates.");
                return;
            }

            if (endDate < startDate) {
                errorToaster("End date should be greater than Start date.Reset End date");
                document.getElementById("endDate").value = "";
                return;
            }
            GenerateMonths(startDate, endDate);
        }

        //calculate months from start and end datee
        function GenerateMonths(srartDate, endDate) {
            MonthsArr = [];

            var StartDateList = startDate.split("-")
            var EndDateList = endDate.split("-")

            if (StartDateList[0] != EndDateList[0]) {
                MonthsArr.push(DemoLabels[parseInt(StartDateList[1]) - 1] + "-" + StartDateList[0]);
                for (let i = parseInt(StartDateList[1]); i < 12; i++) {
                    MonthsArr.push(DemoLabels[i] + "-" + StartDateList[0]);
                }
                for (let i = 0; i < parseInt(EndDateList[1]); i++) {
                    MonthsArr.push(DemoLabels[i] + "-" + EndDateList[0]);
                }
            }
            else if (StartDateList[0] == EndDateList[0]) {
                for (let i = parseInt(StartDateList[1]); i <= parseInt(EndDateList[1]); i++) {
                    MonthsArr.push(DemoLabels[i - 1] + "-" + StartDateList[0]);
                }
            }
            GenerateBudgetSheet();

        }

        //generate budget sheet - render partial view of sheet
        function GenerateBudgetSheet() {
            $.ajax({
                url: "/Home/GenerateBudgetSheet",
                type: "GET",
                data: {
                    monthList: JSON.stringify(MonthsArr)
                },
                success: function (response) {
                    $("#Budget-Sheet-data").html(response);
                    successToaster("Budget updated successfully");
                },
            })
        }

        //set viewmodel when partial view loads
        function DatasheetData(DatasheetData) {
            DatasheetVM = DatasheetData;
            console.log("DatasheetVM", DatasheetVM);
        }

        //update calculations
        function UpdateBudgetSheet() {
            for (i = 0; i < DatasheetVM.monthList.length; i++) {
                DatasheetVM.totalIncome[i] = 0;
                DatasheetVM.totalExpense[i] = 0;
                DatasheetVM.profitLoss[i] = 0;
                DatasheetVM.openingBalance[i] = 0;
                DatasheetVM.closingBalance[i] = 0;
            }
            for (i = 0; i < DatasheetVM.incomeCategoryList.length; i++) {
                for (j = 0; j < DatasheetVM.monthList.length; j++) {
                    DatasheetVM.totalIncome[j] += DatasheetVM.incomeCategoryList[i].amount[j];

                }
            }
            for (i = 0; i < DatasheetVM.expenseCategoryList.length; i++) {
                for (j = 0; j < DatasheetVM.monthList.length; j++) {
                    DatasheetVM.totalExpense[j] += DatasheetVM.expenseCategoryList[i].amount[j];
                }
            }

            for (i = 0; i < DatasheetVM.monthList.length; i++) {
                DatasheetVM.profitLoss[i] = DatasheetVM.totalIncome[i] - DatasheetVM.totalExpense[i];
                if (i == 0) {
                    DatasheetVM.openingBalance[i] = 0;
                }
                else {
                    DatasheetVM.openingBalance[i] = DatasheetVM.closingBalance[i - 1];
                }
                DatasheetVM.closingBalance[i] = DatasheetVM.openingBalance[i] + DatasheetVM.profitLoss[i];



                //update in UI
                document.querySelectorAll(".TotalIncome")[i].value = DatasheetVM.totalIncome[i];
                document.querySelectorAll(".TotalExpense")[i].value = DatasheetVM.totalExpense[i];
                document.querySelectorAll(".ProfitLoss")[i].value = DatasheetVM.profitLoss[i];
                document.querySelectorAll(".OpeningBalance")[i].value = DatasheetVM.openingBalance[i];
                document.querySelectorAll(".ClosingBalance")[i].value = DatasheetVM.closingBalance[i];
            }

        }

        //delete category
        function deleteCategory() {
            var index = document.getElementById("cat-index").value;
            var isIncome = document.getElementById("is-income").value == "true" ? true : false;
            $.ajax({
                url: "/Home/DeleteCategory",
                type: "GET",
                data: {
                    index: index,
                    isIncome: isIncome,
                    DatasheetVM: JSON.stringify(DatasheetVM)
                },
                success: function (response) {
                    $("#Budget-Sheet-data").html(response);
                    setTimeout(function () {
                        UpdateBudgetSheet();
                    }, 1000);

                    successToaster("Category deleted successfully");
                    $('.btn-close').click();
                },
                error: function (error) {
                    errorToaster("Error deleting category");
                }
            })
        }

        //add new category
        function addCategory(isIncome) {
            $.ajax({
                url: "/Home/AddCategory",
                type: "GET",
                data: {
                    isIncome: isIncome,
                    DatasheetVM: JSON.stringify(DatasheetVM)
                },
                success: function (response) {
                    $("#Budget-Sheet-data").html(response);
                    if (isIncome) {
                        document.getElementsByClassName("IncomeName")[DatasheetVM.incomeCategoryList.length].focus();
                    } else {
                        document.getElementsByClassName("ExpenseName")[DatasheetVM.expenseCategoryList.length].focus();
                    }
                }
            })
        }

        //reset budget sheet
        function resetSheet() {
            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            MonthsArr = [];
            DatasheetVM = {
                monthList: [],
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: [],
                totalExpense: [],
                profitLoss: [],
                openingBalance: [],
                closingBalance: []
            };
            $("#Budget-Sheet-data").html("");
            successToaster("Budget sheet reset successfully");
        }

    </script>



    <script>

        $(document).ready(function () {


            //start date validations
            $("#startDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDateInput = document.getElementById("endDate").value;

                if (endDateInput == "") return;
                if (endDateInput < startDate) {
                    errorToaster("End date should be greater than Start date.Reset End date");
                    endDate = "";
                    document.getElementById("endDate").value = "";
                }
            })

            //enddate validations
            $("#endDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDate = document.getElementById("endDate").value;

                if (endDate < startDate) {
                    errorToaster("End date should be greater than Start date.Reset End date");
                    document.getElementById("endDate").value = "";
                    endDate = "";
                }
            })

            //change income category name
            $(document).on("input", ".IncomeName", function () {
                var catIndex = $(this).data("incomeindex");
                var value = $(this).val();
                DatasheetVM.incomeCategoryList[catIndex].catgeoryName = value;
                UpdateBudgetSheet();

            });

            //disable income name category
            $(document).on("change", ".IncomeName", function () {
                this.setAttribute("disabled", "disabled");
            });

            //change expense category name
            $(document).on("input", ".ExpenseName", function () {
                var catIndex = $(this).data("expenseindex");
                var value = $(this).val();
                DatasheetVM.expenseCategoryList[catIndex].catgeoryName = value;
                UpdateBudgetSheet();
            });

            //disable expense name category
            $(document).on("change", ".ExpenseName", function () {
                this.setAttribute("disabled", "disabled");
            });

            //change income input
            $(document).on("input", ".IncomeInput", function () {
                var amountindex = $(this).data("month");
                var catIndex = $(this).data("incomeindex");
                var value = $(this).val();
                DatasheetVM.incomeCategoryList[catIndex].amount[amountindex] = parseInt(value);
                UpdateBudgetSheet();
            });

            //change expense input
            $(document).on("input", ".ExpenseInput", function () {
                var amountindex = $(this).data("month");
                var catIndex = $(this).data("expenseindex");
                var value = $(this).val();
                DatasheetVM.expenseCategoryList[catIndex].amount[amountindex] = parseInt(value);
                UpdateBudgetSheet();
            });

            //delete category
            $(document).on("click", ".deletedata", function () {
                var index = $(this).data("index");
                var isIncome = $(this).data("isincome");
                document.getElementById("cat-index").value = index;
                document.getElementById("is-income").value = isIncome;
                $("#delete-category").modal("show");
            });

            //add new category on enter key press or update if not
            $(document).on("keydown", ".inputClass", function (e) {
                if (e.keyCode == 13) {
                    if (e.target.classList.contains("IncomeName") || e.target.classList.contains("IncomeInput")) {
                        if (DatasheetVM.incomeCategoryList[DatasheetVM.incomeCategoryList.length - 1].catgeoryName == "") {
                            document.getElementsByClassName("IncomeName")[DatasheetVM.incomeCategoryList.length - 1].focus();
                        } else {
                            addCategory(true);
                        }
                    } else {
                        if (DatasheetVM.expenseCategoryList[DatasheetVM.expenseCategoryList.length - 1].catgeoryName == "") {
                            document.getElementsByClassName("ExpenseName")[DatasheetVM.expenseCategoryList.length - 1].focus();
                        } else {
                            addCategory(false);
                        }
                    }
                } else {
                    UpdateBudgetSheet();
                }
            });

        })
    </script>

    <partial name="_Toaster" />
}