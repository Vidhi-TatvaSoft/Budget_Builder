@{
    ViewData["Title"] = "Home Page";
}



<div class="container-fluid p-3">

    <div class="input-div rounded p-3" style="background-color: #f4f7f8;">
        <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center mb-3">
            <div class="title-text text-color fs-3 fw-bold mb-3">Budget Calculator</div>
            <button class="btn button-solid fs-4 fw-bold" data-bs-toggle="modal" data-bs-target="#import-file-modal"
                style="height: 50px;">Import</button>
        </div>
        <div class="row g-2 mb-3">
            <div class="col-12 col-sm-6 col-md-2">
                <div class="form-floating ">
                    <input type="date" id="startDate" class="form-control fs-5" placeholder="Start date"
                        style="height: 70px;">
                    <label for="startDate" class="fs-5">Start Date</label>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-2">
                <div class="form-floating">
                    <input type="date" id="endDate" class="form-control fs-5" placeholder="End date"
                        style="height: 70px;">
                    <label for="endDate" class="fs-5">End Date</label>
                </div>
            </div>
            <div class="col-6 col-sm-3 col-md-2 d-flex align-items-end">
                <button class="btn button-solid w-100 fs-4" id="generate-btn-id" onclick="generate()"
                    style="height: 70px;">Generate</button>
            </div>
            <div class="col-6 col-sm-3 col-md-2 d-flex align-items-end">
                <button class="btn btn-secondary w-100 fs-4" id="reset-button-id" data-bs-toggle="modal"
                    data-bs-target="#reset-sheet" disabled style="height: 70px;">Reset</button>
            </div>
            <div class="col-6 col-sm-3 col-md-2 d-flex align-items-end">
                <button class="btn btn-secondary w-100 fs-4" id="export-id" onclick="ExportSheet()" disabled
                    style="height: 70px;">Export</button>
            </div>
            <div class="col-6 col-sm-3 col-md-2 d-flex align-items-end">
                <button class="btn btn-secondary w-100 fs-4" id="activity-button" onclick="activityToggle()" disabled
                    style="height: 70px;">Activity</button>
            </div>
        </div>
        <a class="btn btn-primary example-popover d-none" title="Update Category name">Trigger popover with other html
            content</a>

        <div class="d-none " id="popover-main-class">
            <div id="mypopover-content">
                <p><input type="text" placeholder="Update category name" id="categorynameToUpdate"></p>
                <input type="hidden" id="categoryIndexToUpdate">
                <input type="hidden" id="oldCategoryName">
                <input type="hidden" id="isInputForUpdateCategory">
                <button type="button" class="btn button-solid " onclick="UpdateCategoryName()">Update</button>
            </div>
        </div>
    </div>

    <div class="activity-main-div rounded mt-4 d-none"
        style="background-color: #f4f7f8; max-height: 400px; overflow: auto;">
        <div class="text-color mt-2 mb-2 fs-3 fw-bold">Recent Activity <button class="btn btn-secondary ms-2"
                onclick="ExportActivity()">Export</button></div>
        <ul id="activity-list" class="list-unstyled"></ul>
    </div>

    <div class="data-entries rounded mt-4" id="sheetTableId"
        style="background-color: #f4f7f8;  max-height: 600px; overflow: auto;">
        <div id="Budget-Sheet-data" class="table-main-div">
            <table id="example" class="table display">

            </table>
        </div>
    </div>
    <div class="d-none" id="exportActivityTable"></div>
    <div class="d-none" id="exportTablediv"></div>

</div>



<!----------------------------- modal  --------------------------------------------------->

<div id="delete-category" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <p>Are you sure you want to Delete this category?</p>
                    <input type="hidden" id="cat-index">
                    <input type="hidden" id="is-income">

                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-dark" onclick="deleteCategory()">Yes</a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div id="reset-sheet" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reset confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <p>Are you sure you want to Reset sheet?</p>
                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-dark" onclick="resetSheet()">Yes</a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>


<div id="apply-to-all" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header ">
                <h5 class="modal-title">Apply to All</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">

                    <p class="text-center">Are you sure you want apply this value to specific months of this category?
                    </p>
                    <input type="hidden" id="cat-index-apply">
                    <input type="hidden" id="value-apply">
                    <input type="hidden" id="is-income-apply">
                    <input type="hidden" id="month-apply">
                </div>

            </div>
            <div class="modal-footer d-flex  justify-content-center">
                <a type="submit" class="btn btn-outline-dark" onclick="applyTOAll()" style="width: 200px;">Apply to
                    all</a>
                <a type="submit" class="btn btn-outline-dark" onclick="applyBefore()" style="width: 200px;">Apply Before
                    this date</a>
                <a type="submit" class="btn btn-outline-dark" onclick="applyAfter()" style="width: 200px;">Apply After
                    this date</a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"
                    style="width: 200px;">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="import-file-modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header ">
                <h5 class="modal-title">Import Excel file</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class=" d-flex flex-column  align-items-center">

                    <p class="text-center">Select an Excel file to import your data.
                        <br> Please ensure the file is in .xlsx format.
                    </p>
                    <p id="import-message"></p>
                    <input type="file" id="import-file-id" accept=".xlsx, .xls">
                </div>
                @* <div class="d-flex justify-content-center align-items-center  text-secondary browse-file-div bg-white border"
                    style="height: 50px; width: 100%;  ">
                    <input type="file"  class=" d-none " id="import-file-id" accept=".xlsx, .xls"/>
                    <label for="import-file-id" >
                        <i class="fa-solid fa-cloud-arrow-up d-flex justify-content-center"></i><span
                            id="browseFileText"> Browse
                            files</span></label>
                </div> *@

            </div>
            <div class="modal-footer d-flex  justify-content-center">
                <a type="submit" class="btn btn-dark" onclick="ImportFile()" style="width: 200px;">Import</a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"
                    style="width: 200px;">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div id="confirmReloadModal" class="modal " tabindex="-1" role="dialog" aria-labelledby="confirmReloadLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmReloadLabel">Reload confirmation</h5>
            </div>
            <div class="modal-body">
                <p class="text-center">
                    The data you have entered will be vanished.
                    <br>
                    Are you sure you want to refresh the page?
                </p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-dark" id="confirmReload">Yes</button>
                <button type="button" class="btn btn-outline-dark" id="cancelReload">No</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    @* <script src="table2excel.js"></script> *@
    <script type="module" src="~/js/const.js"></script>
    <script>

        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;
        var monthArray = [];
        var monthNamesArray = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var datasheetVM;
        var timeArray = [];
        var colorArray = [];
        var messageArray = [];
        var activityListObject = [];
        var isChangeAfterExport = true;


        var popover = new bootstrap.Popover(document.querySelector('.example-popover'), {
            container: 'body',
            html: true,
            content: document.getElementById('mypopover-content'),
        })

        //check validation of dates input and call generate sheet
        function generate() {
            startDate = document.getElementById("startDate").value;
            endDate = document.getElementById("endDate").value;

            if (!startDate || !endDate) {
                Toaster(constant.startDateEndDateValidation, "error");
                return;
            }

            if (endDate < startDate) {
                Toaster(constant.endDateValidation, "error");
                document.getElementById("endDate").value = "";
                return;
            }
            datasheetVM = {
                monthList: [],
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: [],
                totalExpense: [],
                profitLoss: [],
                openingBalance: [],
                closingBalance: []
            };
            activityListObject = [];
            @* timeArray = [];
            colorArray = [];
            messageArray = []; *@
                isChangeAfterExport = true;
            generateMonths(startDate, endDate);
        }

        //calculate months from start and end date
        function generateMonths(srartDate, endDate) {
            monthArray = [];
            isChangeAfterExport = true;
            var startDateList = startDate.split("-")
            var endDateList = endDate.split("-")

            if (startDateList[0] != endDateList[0]) {
                var differenceYear = parseInt(endDateList[0]) - parseInt(startDateList[0]);
                for (i = 0; i <= differenceYear; i++) {
                    if (i == 0) {
                        for (j = parseInt(startDateList[1]) - 1; j < monthNamesArray.length; j++) {
                            monthArray.push(monthNamesArray[j] + "-" + (parseInt(startDateList[0]) + i).toString());
                        }
                    }
                    else if (i == differenceYear) {
                        for (j = 0; j < parseInt(endDateList[1]); j++) {
                            monthArray.push(monthNamesArray[j] + "-" + (parseInt(startDateList[0]) + i).toString());
                        }
                    }
                    else {
                        for (j = 0; j < monthNamesArray.length; j++) {
                            monthArray.push(monthNamesArray[j] + "-" + (parseInt(startDateList[0]) + i).toString())
                        }
                    }
                }
            }
            else if (startDateList[0] == endDateList[0]) {
                for (let i = parseInt(startDateList[1]); i <= parseInt(endDateList[1]); i++) {
                    monthArray.push(monthNamesArray[i - 1] + "-" + startDateList[0]);
                }
            }
            generateBudgetSheet();
        }

        //generate budget sheet - render partial view of sheet
        function generateBudgetSheet() {
            isChangeAfterExport = true;
            datasheetVM = {
                monthList: monthArray,
                incomeCategoryList: [{
                    catgeoryName: "",
                    amount: new Array(monthArray.length).fill(0)
                }],
                expenseCategoryList: [{
                    catgeoryName: "",
                    amount: new Array(monthArray.length).fill(0)
                }],
                totalIncome: new Array(monthArray.length).fill(0),
                totalExpense: new Array(monthArray.length).fill(0),
                profitLoss: new Array(monthArray.length).fill(0),
                openingBalance: new Array(monthArray.length).fill(0),
                closingBalance: new Array(monthArray.length).fill(0)
            };

            RenderTable(datasheetVM);
            $("#generate-btn-id").prop("disabled", true);
            fillActivityArray(constant.blueColor, constant.generatesheetActivityMessage(monthArray[0], monthArray[monthArray.length - 1]));
            Toaster(constant.generateSuccessMessage);
            document.getElementById("export-id").removeAttribute("disabled");
            document.getElementById("reset-button-id").removeAttribute("disabled");

            //set viewmodel when partial view loads
            datasheetData(datasheetVM);
            isPageReload = false;

        }

        //render the table
        function RenderTable(datasheetVM) {
            isChangeAfterExport = true;
            var BudgetSheetTable = document.getElementById("example");
            BudgetSheetTable.innerHTML = "";

            var row = ` <thead>
                                                                                                                        <tr>
                                                                                                                            <th class="headcol">Category</th>`
            datasheetVM.monthList.forEach((month) => {
                row += `<th class="text-center subcol">${month}</th>`;
            })
            row += `<th class="text-center lastcol">Delete</th>
                                                                                                                    </tr>
                                                                                                                </thead>
                                                                                                                <tbody>
                                                                                                            <!---------------------- Income ------------------>
                                                                                                            <tr>
                                                                                                                <td class="fw-bold headcol">Income</td>
                                                                                                                <td  colspan="${datasheetVM.monthList.length + 1}" class="subcol"></td>
                                                                                                            </tr>
                                                                                                        </tbody>

                                                                                                             <tbody id="income-data-id">`
            datasheetVM.incomeCategoryList.forEach((income, incomeIndex) => {
                row += `<tr>
                                                                                                                <td class="headcol"><input type="text" placeholder="Enter Income" value="${income.catgeoryName}"
                                                                                                                        data-incomeindex="${incomeIndex}" data-bs-toggle="popover" data-bs-placement="top"  class="IncomeName inputClass example-popover" ${(income.catgeoryName == "" ? "" :
                        "disabled")}></td>`
                @* for (i = 0; i < datasheetVM.monthList.length; i++)
                { *@
                    datasheetVM.monthList.forEach((month, i) => {
                        row += `<td  class="text-center subcol table-data-class"><input type="text"   value="${income.amount[i]}" class="IncomeInput inputClass input-data-number" data-month="${i}"
                                                                                                                    data-incomeindex="${incomeIndex}">
                                                                                                                    <input type="hidden"  class="monthIncomeH" value="${i}">
                                                                                                                    <input type="hidden" class="incomeindexH" value="${incomeIndex}">
                                                                                                                    </td>`
                    })
                row += `<td class="text-center  inputClass lastcol"><i class="bi bi-trash text-danger deletedata inputClass ${(income.catgeoryName == "" ? "d-none" : "")}" data-index="${incomeIndex}"
                                                                                                                data-isincome="true"></i>
                                                                                                                <input type="hidden" class="indexIncomeH" value="${incomeIndex}">
                                                                                                        </td>
                                                                                                    </tr>`
                incomeIndex++;
            })

            row += `</tbody>
                                                                                                                <tbody>
                                                                                                                    <tr>
                                                                                                                        <td class="fw-bold headcol">Total Income</td>`
            datasheetVM.totalIncome.forEach((income) => {
                row += `<td  class="text-center subcol"><input type="text" value="${income}" disabled class="TotalIncome"></td>`;
            })

            row += `<td class="lastcol"></td>
                                                                                                                </tr>
                                                                                                            </tbody>
                                                                                                            <tbody>
                                                                                                                <!---------------------- expense ------------------>
                                                                                                                <tr>
                                                                                                                    <td class="fw-bold headcol">Expense</td>
                                                                                                                    <td  colspan="${datasheetVM.monthList.length + 1}" class="subcol"></td>
                                                                                                                </tr>
                                                                                                            </tbody>
                                                                                                            <tbody id="expense-data-id">`



            datasheetVM.expenseCategoryList.forEach((expense, expenseIndex) => {
                row += `<tr >
                                                                                                                    <td class="headcol"><input type="text" placeholder="Enter Expense" value="${expense.catgeoryName}"
                                                                                                                            data-expenseindex="${expenseIndex}" data-bs-toggle="popover" data-bs-placement="top" class="ExpenseName inputClass example-popover" ${(expense.catgeoryName == "" ? "" :
                        "disabled")}></td>`
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    row += `<td  class="text-center subcol table-data-class"><input type="text" value="${expense.amount[i]}" class="ExpenseInput inputClass input-data-number" data-month="${i}"
                                                                                                                        data-expenseindex="${expenseIndex}">
                                                                                                                        <input type="hidden"  class="monthExpenseH" value="${i}">
                                                                                                                        <input type="hidden" class="expenseindexH" value="${expenseIndex}">
                                                                                                                        </td>`
                }
                row += `<td class="text-center lastcol "><i class="bi bi-trash text-danger deletedata inputClass ${(expense.catgeoryName == "" ? "d-none" : "")}" data-index="${expenseIndex}"
                                                                                                                data-isincome="false"></i>
                                                                                                                <input type="hidden" class="indexExpenseH" value="${expenseIndex}">
                                                                                                        </td>
                                                                                                    </tr>`
                expenseIndex++;
            })

            row += `</tbody>
                                                                                                                    <tbody>
                                                                                                                        <tr>
                                                                                                                            <td class="fw-bold headcol">Total Expense</td>`
            datasheetVM.totalExpense.forEach((expense) => {
                row += `<td  class="text-center subcol"><input type="text" value="${expense}" disabled class="TotalExpense"></td>`;
            })
            row += `<td class="lastcol"></td>
                                                                                                            </tr>
                                                                                                        </tbody>

                                                                                                        <tbody>
                                                                                                            <!-----------------------  summary title----------------->
                                                                                                            <tr>
                                                                                                                <td class="fw-bold headcol">Summary</td>
                                                                                                                <td colspan="${datasheetVM.monthList.length}" class="subcol"></td>
                                                                                                            </tr>
                                                                                                            <!-----------------------  Profit/Loss<---------------->
                                                                                                            <tr>
                                                                                                                <td class="fw-bold headcol">Profit/Loss</td>`

            datasheetVM.profitLoss.forEach((profit) => {
                row += `<td class="text-center subcol"><input type="text" value="${profit}" disabled class="ProfitLoss"></td>`;
            })

            row += `<td class="lastcol"></td>
                                                                                                                </tr>

                                                                                                                <!----------------------- Opening Balance----------------->
                                                                                                                <tr>
                                                                                                                    <td class="fw-bold headcol">Opening Balance</td>`;

            datasheetVM.openingBalance.forEach((opening) => {
                row += `<td class="text-center subcol"><input type="text" value="${opening}" disabled class="OpeningBalance"></td>`;
            })

            row += `<td class="lastcol"></td>
                                                                                                                </tr>

                                                                                                                <!-----------------------Closing Balance----------------->
                                                                                                                <tr>
                                                                                                                    <td class="fw-bold headcol">Closing Balance</td>`;

            datasheetVM.closingBalance.forEach((closing) => {
                row += `<td class="text-center subcol"><input type="text" value="${closing}" disabled class="ClosingBalance"></td>`;
            })

            row += `<td class="lastcol"></td>
                                                                                                                </tr>`;

            BudgetSheetTable.innerHTML = row;
        }

        //set viewmodel when partial view loads
        function datasheetData(datasheetData) {
            datasheetVM = datasheetData;
            console.log("datasheetVM", datasheetVM);
        }

        //update calculations
        function updateBudgetSheet() {
            isChangeAfterExport = true;

            for (i = 0; i < datasheetVM.monthList.length; i++) {
                datasheetVM.totalIncome[i] = 0.0;
                datasheetVM.totalExpense[i] = 0;
                datasheetVM.profitLoss[i] = 0;
                datasheetVM.openingBalance[i] = 0;
                datasheetVM.closingBalance[i] = 0;
            }
            for (i = 0; i < datasheetVM.incomeCategoryList.length; i++) {
                for (j = 0; j < datasheetVM.monthList.length; j++) {
                    datasheetVM.totalIncome[j] += datasheetVM.incomeCategoryList[i].amount[j];
                }
            }
            for (i = 0; i < datasheetVM.expenseCategoryList.length; i++) {
                for (j = 0; j < datasheetVM.monthList.length; j++) {
                    datasheetVM.totalExpense[j] += datasheetVM.expenseCategoryList[i].amount[j];
                }
            }

            for (i = 0; i < datasheetVM.monthList.length; i++) {
                datasheetVM.profitLoss[i] = datasheetVM.totalIncome[i] - datasheetVM.totalExpense[i];
                if (i == 0) {
                    datasheetVM.openingBalance[i] = 0;
                }
                else {
                    datasheetVM.openingBalance[i] = datasheetVM.closingBalance[i - 1];
                }
                datasheetVM.closingBalance[i] = datasheetVM.openingBalance[i] + datasheetVM.profitLoss[i];


                //update in UI

                document.querySelectorAll(".TotalIncome")[i].value =formatedata(datasheetVM.totalIncome[i].toFixed(2)) ;
                document.querySelectorAll(".TotalExpense")[i].value = formatedata(datasheetVM.totalExpense[i].toFixed(2)) ;
                document.querySelectorAll(".ProfitLoss")[i].value = formatedata(datasheetVM.profitLoss[i].toFixed(2));
                document.querySelectorAll(".OpeningBalance")[i].value =formatedata(datasheetVM.openingBalance[i].toFixed(2));
                document.querySelectorAll(".ClosingBalance")[i].value = formatedata(datasheetVM.closingBalance[i].toFixed(2));

            }

        }

        //format
        function formatedata(amount) {
            if (!isNaN(amount)) {
                return new Intl.NumberFormat("en-IN").format(amount);
            } else {
                return 0;
            }
        }

        //update sheet on add delete
        function renderIncomeExpenseBody(isIncome) {
            isChangeAfterExport = true;
            if (isIncome) {
                var incomeBody = document.getElementById("income-data-id");
                incomeBody.innerHTML = "";
                var row = "";
                datasheetVM.incomeCategoryList.forEach((income, incomeIndex) => {
                    row += `<tr>
                                                                                                                    <td class="headcol"><input type="text" placeholder="Enter Income" value="${income.catgeoryName}"
                                                                                                                            data-incomeindex="${incomeIndex}" data-bs-toggle="popover" data-bs-placement="top"  class="IncomeName inputClass example-popover" ${(income.catgeoryName == "" ? "" :
                            "disabled")}></td>`

                    datasheetVM.monthList.forEach((month, i) => {
                        row += `<td  class="text-center subcol table-data-class"><input type="text"   value="${formatedata(income.amount[i].toFixed(2))}" class="IncomeInput inputClass input-data-number" data-month="${i}"
                                                                                                                            data-incomeindex="${incomeIndex}" >
                                                                                                                            <input type="hidden"  class="monthIncomeH" value="${i}">
                                                                                                                            <input type="hidden" class="incomeindexH" value="${incomeIndex}">
                                                                                                                            </td>`
                    })
                    row += `<td class="text-center lastcol inputClass"><i class="bi bi-trash text-danger deletedata inputClass ${(income.catgeoryName == "" ? "d-none" : "")}" data-index="${incomeIndex}"
                                                                                                                        data-isincome="true"></i>
                                                                                                                        <input type="hidden" class="indexIncomeH" value="${incomeIndex}">
                                                                                                                </td>
                                                                                                            </tr>`
                    incomeIndex++;
                });

                incomeBody.innerHTML = row;
            } else {
                var expenseBody = document.getElementById("expense-data-id");
                expenseBody.innerHTML = "";
                var row = "";
                datasheetVM.expenseCategoryList.forEach((expense, expenseIndex) => {
                    row += `<tr >
                                                                                                                        <td class="headcol"><input type="text" placeholder="Enter Expense" value="${expense.catgeoryName}"
                                                                                                                                data-expenseindex="${expenseIndex}" data-bs-toggle="popover" data-bs-placement="top" class="ExpenseName inputClass example-popover" ${(expense.catgeoryName == "" ? "" :
                            "disabled")}></td>`
                    for (i = 0; i < datasheetVM.monthList.length; i++) {
                        row += `<td  class="text-center subcol table-data-class"><input type="text" value="${formatedata(expense.amount[i].toFixed(2))}" class="ExpenseInput inputClass input-data-number" data-month="${i}"
                                                                                                                            data-expenseindex="${expenseIndex}">
                                                                                                                            <input type="hidden"  class="monthExpenseH" value="${i}">
                                                                                                                            <input type="hidden" class="expenseindexH" value="${expenseIndex}">
                                                                                                                            </td>`
                    }
                    row += `<td class="text-center lastcol "><i class="bi bi-trash text-danger deletedata inputClass ${(expense.catgeoryName == "" ? "d-none" : "")}" data-index="${expenseIndex}"
                                                                                                                        data-isincome="false"></i>
                                                                                                                        <input type="hidden" class="indexExpenseH" value="${expenseIndex}">
                                                                                                                </td>
                                                                                                            </tr>`
                    expenseIndex++;
                })

                expenseBody.innerHTML = row;
            }
        }

        //delete category
        function deleteCategory() {
            isChangeAfterExport = true;
            var index = document.getElementById("cat-index").value;
            var isIncome = document.getElementById("is-income").value == "true" ? true : false;
            var catgeoryName = isIncome ? datasheetVM.incomeCategoryList[index].catgeoryName : datasheetVM.expenseCategoryList[index].catgeoryName;
            var section = isIncome ? "Income" : "Expense";
            if (isIncome) {
                datasheetVM.incomeCategoryList.splice(index, 1);
                if (datasheetVM.incomeCategoryList.length == 0) {
                    addCategory(true);
                }
                renderIncomeExpenseBody(true);
            } else {
                datasheetVM.expenseCategoryList.splice(index, 1);
                if (datasheetVM.expenseCategoryList.length == 0) {
                    addCategory(false);
                }
                renderIncomeExpenseBody(false);
            }
            @* RenderTable(datasheetVM); *@
                fillActivityArray(constant.redColor, constant.deleteCategoryActivityMessage(catgeoryName, section));
            updateBudgetSheet();
            Toaster(constant.categoryDeleteMessage(catgeoryName, section));
            $('.btn-close').click();

        }

        //add new category
        function addCategory(isIncome) {
            isChangeAfterExport = true;
            if (isIncome) {
                var newCategory = {
                    catgeoryName: "",
                    amount: new Array(datasheetVM.monthList.length).fill(0)
                };
                datasheetVM.incomeCategoryList.push(newCategory);
                renderIncomeExpenseBody(true)
            } else {
                var newCategory = {
                    catgeoryName: "",
                    amount: new Array(datasheetVM.monthList.length).fill(0)
                };
                datasheetVM.expenseCategoryList.push(newCategory);
                renderIncomeExpenseBody(false);
            }
            if (isIncome) {
                document.getElementsByClassName("IncomeName")[datasheetVM.incomeCategoryList.length - 1].focus();
            } else {
                document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
            }

        }

        //reset budget sheet
        function resetSheet() {
            if (isChangeAfterExport) {
                ExportSheet();
            }
            if (!document.getElementsByClassName("activity-main-div")[0].classList.contains("d-none")) {
                document.getElementsByClassName("activity-main-div")[0].classList.add("d-none")
            }
            document.getElementById("export-id").setAttribute("disabled", "disabled");
            document.getElementById("reset-button-id").setAttribute("disabled", "disabled");
            document.getElementById("activity-button").setAttribute("disabled", "disabled");


            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            monthArray = [];
            datasheetVM = {
                monthList: [],
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: [],
                totalExpense: [],
                profitLoss: [],
                openingBalance: [],
                closingBalance: []
            };
            activityListObject = [];
            @* timeArray = [];
            colorArray = [];
            messageArray = []; *@
                $("#example").html("");
            $(".btn-close").click();
            document.getElementById("generate-btn-id").removeAttribute("disabled");
            Toaster(constant.resetMessage);
            isChangeAfterExport = false;
            isPageReload = true;
        }

        //apply value to all months
        function applyTOAll() {
            isChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            if (isincome == "true") {
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray(constant.greenColor, constant.ApplyToAllActivityMessage(datasheetVM.incomeCategoryList[catIndex].catgeoryName, value, section = "Income"));
            } else {
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray(constant.greenColor, constant.ApplyToAllActivityMessage(datasheetVM.expenseCategoryList[catIndex].catgeoryName, value, section = "Expense"));
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //function to apply value before a specific month
        function applyBefore() {
            isChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            var month = parseInt(document.getElementById("month-apply").value);

            if (isincome == "true") {
                for (i = 0; i < month; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray(constant.greenColor, constant.applyBeforeActivityMessage(datasheetVM.incomeCategoryList[catIndex].catgeoryName, value, section = "Income", datasheetVM.monthList[month]));
            } else {
                for (i = 0; i < month; i++) {
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray(constant.greenColor, constant.applyBeforeActivityMessage(datasheetVM.expenseCategoryList[catIndex].catgeoryName, value, section = "Expense", datasheetVM.monthList[month]));
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //function to apply value after a specific month
        function applyAfter() {
            isChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            var month = parseInt(document.getElementById("month-apply").value);

            if (isincome == "true") {
                for (i = month; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray(constant.greenColor, constant.applyAfterActivityMessage(datasheetVM.incomeCategoryList[catIndex].catgeoryName, value, section = "Income", datasheetVM.monthList[month]));
            } else {
                for (i = month; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray(constant.greenColor, constant.applyAfterActivityMessage(datasheetVM.expenseCategoryList[catIndex].catgeoryName, value, section = "Expense", datasheetVM.monthList[month]));
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //extract data from table to gemerate excel file
        function extractData(tableId, isDeleteCol = false) {
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll("tr");
            const data = [];

            rows.forEach((row) => {
                const rowData = [];
                const cells = row.querySelectorAll("th, td");
                const length = isDeleteCol ? cells.length - 1 : cells.length;

                let skipRow = false;
                const firstCellInput = cells[0]?.querySelector("input");
                const firstCellClass = firstCellInput?.classList?.value || "";

                if (
                    firstCellInput &&
                    (firstCellClass.includes("IncomeName") || firstCellClass.includes("ExpenseName")) &&
                    firstCellInput.value.trim() === ""
                ) {
                    skipRow = true;
                }

                if (!skipRow) {
                    for (let i = 0; i < length; i++) {
                        const cell = cells[i];
                        const input = cell.querySelector("input");
                        if (input) {
                            rowData.push(input.value);
                        } else {
                            rowData.push(cell.innerText.trim());
                        }
                    }
                    data.push(rowData);
                }
            });

            return data;

        }

        //export budgetsheet and activity sheet to excel
        function ExportSheet() {
            var table = `<table id=activity-table>
                                                        <thead>
                                                            <tr>
                                                                <th>Time</th>
                                                                <th>Message</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>`;
            for (i = 0; i < activityListObject.length; i++) {
                table += `<tr>
                                                        <td>${activityListObject[i].time}</td>
                                                        <td>${activityListObject[i].message}</td>
                                                    </tr>`;
            }
            table += `</tbody>
                                                            </table>`;

            document.getElementById("exportActivityTable").innerHTML = table;


            var budgetSheetData = extractData("example", true);
            var activityData = extractData("exportActivityTable", false);

            const workbook = XLSX.utils.book_new();

            const worksheet1 = XLSX.utils.aoa_to_sheet(budgetSheetData);
            const worksheet2 = XLSX.utils.aoa_to_sheet(activityData);


            XLSX.utils.book_append_sheet(workbook, worksheet1, "Budget");
            XLSX.utils.book_append_sheet(workbook, worksheet2, "Activity");
            var filename = `Budgetsheet (${datasheetVM.monthList[0]} to ${datasheetVM.monthList[datasheetVM.monthList.length - 1]}) ${new Date().toLocaleDateString("en-US")} ${new Date().toLocaleTimeString("en-US")}.xlsx`;
            XLSX.writeFile(workbook, filename);
            isChangeAfterExport = false;
            Toaster(constant.exportMessgae("Budget Sheet"));

        }


        //export activity to excel
        function ExportActivity() {
            if (activityListObject.length == 0) {
                Toaster(constant.activityErrorMessage, "error");
                return;
            }
            else {
                var table = `<table id=activity-table>
                                                                                                                                                                                                    <thead>
                                                                                                                                                                                                        <tr>
                                                                                                                                                                                                            <th>Time</th>
                                                                                                                                                                                                            <th>Message</th>
                                                                                                                                                                                                        </tr>
                                                                                                                                                                                                    </thead>
                                                                                                                                                                                                    <tbody>`;
                for (i = 0; i < messageArray.length; i++) {
                    table += `<tr>
                                                                                                                                                                                                            <td>${timeArray[i]}</td>
                                                                                                                                                                                                            <td>${messageArray[i]}</td>
                                                                                                                                                                                                        </tr>`;
                }
                table += `</tbody>
                                                                                                                                                                                                </table>`;
            }
            document.getElementById("exportActivityTable").innerHTML = table;
            var table = document.getElementById("activity-table");
            var workbook = XLSX.utils.table_to_book(table, { sheet: "activity" });
            var filename = "BudgetSheet.xlsx";
            XLSX.writeFile(workbook, filename);
            Toaster(constant.exportMessgae("Activity"));
        }

        //user activity
        function fillActivityArray(color, messgae, importTime = "") {
            isChangeAfterExport = true;
            document.getElementById("activity-button").removeAttribute("disabled");

            var today = new Date();
            var date = today.toLocaleDateString("en-US");
            var time = today.toLocaleTimeString("en-US");
            var currentTime = date + " " + time;
            var activityObject = {
                time: importTime == "" ? currentTime : importTime,
                color: color,
                message: messgae
            }
            activityListObject.push(activityObject);
            @* timeArray.push(currentTime);
            colorArray.push(color);
            messageArray.push(messgae); *@
                                    }

        //activity toggle
        function activityToggle() {
            document.getElementsByClassName("activity-main-div")[0].classList.toggle("d-none");
            if (document.getElementsByClassName("activity-main-div")[0].classList.contains("d-none")) {
                $(".inputClass").prop("disabled", false);
                $(".ExpenseName").prop("disabled", true);
                $(".IncomeName").prop("disabled", true);
                var length1 = datasheetVM.incomeCategoryList.length;
                var length2 = datasheetVM.expenseCategoryList.length;
                if (datasheetVM.incomeCategoryList[length1 - 1].catgeoryName == '') {
                    var incomeClassList = document.getElementsByClassName("IncomeName")
                    incomeClassList[length1 - 1].removeAttribute("disabled", "disabled")
                }
                if (datasheetVM.expenseCategoryList[length2 - 1].catgeoryName == '') {
                    var expenseClassList = document.getElementsByClassName("ExpenseName")
                    expenseClassList[length2 - 1].removeAttribute("disabled", "disabled")
                }
            } else {
                $(".inputClass").prop("disabled", true);
            }
            displayActivity();
        }

        //display activity
        function displayActivity() {

            var activityList = document.getElementById("activity-list");
            activityList.innerHTML = "";
            if (!activityListObject || activityListObject.length == 0) {
                activityList.innerHTML = `<li style="list-style: none; display: flex; align-items: center; margin-bottom: 10px; font-size: 14px;">No Activity Found</li>`;
                document.getElementById("activity-list").innerHTML = activityList.innerHTML;
                return;
            }

            for (var i = activityListObject.length - 1; i >= 0; i--) {

                activityList.innerHTML += `<li style="list-style: none; display: flex; align-items: center; margin-bottom: 10px; font-size: 14px;">
                                                                            <span class="text-secondary me-3 fw-bold">${activityListObject[i].time}</span>
                                                                            <span class="dot ${activityListObject[i].color} me-3"></span>
                                                                            <span class="text-dark fw-semibold">${activityListObject[i].message}</span>
                                                                        </li>`;
            }
            document.getElementById("activity-list").innerHTML = activityList.innerHTML;
        }

        //import data fromexcel
        function ImportFile() {
            var file = document.getElementById("import-file-id").files[0];
            var importedArray = [];
            var importedMonths = [];

            if (!file) {
                Toaster(constant.EmptyImportValidation, "error");
                return;
            }
            if (file.type !== "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" && file.type !== "application/vnd.ms-excel") {
                Toaster(constant.importInvalidExcelMessage, "error");
                return;
            }
            const reader = new FileReader();
            reader.onload = (event) => {
                const data = new Uint8Array(event.target.result);
                const workbook = XLSX.read(data, { type: 'array' });

                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet);

                if (jsonData.length === 0) {
                    Toaster(constant.importInvalidDataMessage, "error");
                    return;
                }
                if (!jsonData[0].hasOwnProperty("Category")) {
                    Toaster(constant.importInvalidDataMessage, "error");
                    return;
                }
                if (jsonData[0].Category !== "Income" && jsonData[0].Category !== "Expense") {
                    Toaster(constant.importInvalidDataMessage, "error");
                    return;
                }


                for (let i = 0; i < jsonData.length; i++) {
                    importedArray.push(jsonData[i]);
                }

                const montharrayTemp = Object.keys(jsonData[1]).filter(key => key !== "Category");

                let datasheetVMdata = {
                    monthList: montharrayTemp,
                    incomeCategoryList: [],
                    expenseCategoryList: [],
                    totalIncome: new Array(montharrayTemp.length).fill(0),
                    totalExpense: new Array(montharrayTemp.length).fill(0),
                    profitLoss: new Array(montharrayTemp.length).fill(0),
                    openingBalance: new Array(montharrayTemp.length).fill(0),
                    closingBalance: new Array(montharrayTemp.length).fill(0)
                };

                const monthMap = {
                    Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5,
                    Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11
                };

                const [firstMonthStr, lastMonthStr] = [montharrayTemp[0], montharrayTemp[montharrayTemp.length - 1]];
                const [firstMonthName, firstYear] = firstMonthStr.split('-');
                const [lastMonthName, lastYear] = lastMonthStr.split('-');

                const startDate = new Date(parseInt(firstYear), monthMap[firstMonthName], 1);
                const endDate = new Date(parseInt(lastYear), monthMap[lastMonthName] + 1, 0);

                //format yyyy-mm-dd
                const formatDate = (date) => {
                    const yyyy = date.getFullYear();
                    const mm = String(date.getMonth() + 1).padStart(2, '0');
                    const dd = String(date.getDate()).padStart(2, '0');
                    return `${yyyy}-${mm}-${dd}`;
                };

                document.getElementById('startDate').value = formatDate(startDate);
                document.getElementById('endDate').value = formatDate(endDate);

                let count = 0;

                for (let i = 0; i < jsonData.length; i++) {
                    if (jsonData[i].Category == "Income") {
                        count++;
                    } else if (jsonData[i].Category == "Total Income") {
                        count++;
                        break;
                    } else {
                        datasheetVMdata.incomeCategoryList.push({
                            catgeoryName: jsonData[i].Category,
                            amount: montharrayTemp.map(month => parseInt(jsonData[i][month]) || 0)
                        });
                        count++;
                    }
                }
                if (datasheetVMdata.incomeCategoryList.length == 0) {
                    datasheetVMdata.incomeCategoryList.push({
                        catgeoryName: "",
                        amount: new Array(montharrayTemp.length).fill(0)
                    });
                }

                for (let i = count; i < jsonData.length; i++) {
                    if (jsonData[i].Category == "Expense") {
                        count++;
                    } else if (jsonData[i].Category == "Total Expense") {
                        break;
                    } else {
                        datasheetVMdata.expenseCategoryList.push({
                            catgeoryName: jsonData[i].Category,
                            amount: montharrayTemp.map(month => parseInt(jsonData[i][month]) || 0)
                        });
                    }
                }
                if (datasheetVMdata.expenseCategoryList.length == 0) {
                    datasheetVMdata.expenseCategoryList.push({
                        catgeoryName: "",
                        amount: new Array(montharrayTemp.length).fill(0)
                    });
                }
                datasheetData(datasheetVMdata);
                RenderTable(datasheetVM);
                $("#generate-btn-id").prop("disabled", true);
                Toaster(constant.importSuccessMessage);
                popoverContent();
                setTimeout(() => {
                    updateBudgetSheet();
                    isChangeAfterExport = false;

                }, 1000);
                $(".btn-close").click();
                document.getElementById("import-file-id").value = "";
                importedArray = [];

                document.getElementById("export-id").removeAttribute("disabled");
                document.getElementById("reset-button-id").removeAttribute("disabled");

                //import activity
                const sheetNameActivity = workbook.SheetNames[1];
                const worksheetActivity = workbook.Sheets[sheetNameActivity];
                const jsonDataActivity = XLSX.utils.sheet_to_json(worksheetActivity);

                console.log("activity", jsonDataActivity)
                activityListObject = [];
                fillActivityArray(constant.blueColor, constant.importActivityMessage(datasheetVM.monthList[0], datasheetVM.monthList[datasheetVM.monthList.length - 1]));
                if (jsonDataActivity.length > 0) {
                    jsonDataActivity.forEach(activity => {
                        if (activity.Time && activity.Message) {
                            if (activity.Message.includes("delete")) {
                                fillActivityArray(constant.redColor, activity.Message, activity.Time);
                            }
                            fillActivityArray(constant.greenColor, activity.Message, activity.Time);
                        }
                    });
                }

            };
            reader.readAsArrayBuffer(file);
            isChangeAfterExport = false;
        }


        //update category name
        function UpdateCategoryName() {
            var catIndex = document.getElementById("categoryIndexToUpdate").value;
            var value = document.getElementById("categorynameToUpdate").value;
            var isIncome = document.getElementById("isInputForUpdateCategory").value == "true" ? true : false;
            if (value.trim() === "") {
                Toaster(constant.empryCategoryNameMessage, "error");
                $('*').popover('hide');
                document.getElementById("sheetTableId").style.overflow = 'auto';
                popoverContent();
                return;
            }
            if (isIncome) {
                for (i = 0; i < datasheetVM.incomeCategoryList.length; i++) {
                    if (datasheetVM.incomeCategoryList[i].catgeoryName == value && i != catIndex) {
                        Toaster(constant.existingCategorynameMessage, "error");
                        $('*').popover('hide');
                        document.getElementById("sheetTableId").style.overflow = 'auto';
                        popoverContent();
                        return;
                    }
                }
                datasheetVM.incomeCategoryList[catIndex].catgeoryName = value;
                isChangeAfterExport = true;
                updateBudgetSheet();
                fillActivityArray("green", `${value} category is updated under Income Section.`);
                Toaster(constant.categoryNameUpdateSuccessMessage);
                $('*').popover('hide');
                document.getElementById("sheetTableId").style.overflow = 'auto';
                renderIncomeExpenseBody(true);
                popoverContent();
            } else {
                for (i = 0; i < datasheetVM.expenseCategoryList.length; i++) {
                    if (datasheetVM.expenseCategoryList[i].catgeoryName == value && i != catIndex) {
                        Toaster(constant.existingCategorynameMessage);
                        $('*').popover('hide');
                        document.getElementById("sheetTableId").style.overflow = 'auto';
                        popoverContent();
                        return;
                    }
                }
                datasheetVM.expenseCategoryList[catIndex].catgeoryName = value;
                isChangeAfterExport = true;
                updateBudgetSheet();
                fillActivityArray("green", `${value} category is updated under Expense Section.`);
                Toaster(constant.categoryNameUpdateSuccessMessage);
                $('*').popover('hide');
                document.getElementById("sheetTableId").style.overflow = 'auto';
                renderIncomeExpenseBody(false);
                popoverContent();
            }

        }


        //function to fill popover content
        function popoverContent() {
            document.getElementById("popover-main-class").innerHTML = `<div id="mypopover-content">
                                                                            <p><input type="text" placeholder="Update category name" id="categorynameToUpdate"></p>
                                                                            <input type="hidden" id="categoryIndexToUpdate">
                                                                            <input type="hidden" id="oldCategoryName">
                                                                            <input type="hidden" id="isInputForUpdateCategory">
                                                                            <button type="button" class="btn button-solid " onclick="UpdateCategoryName()">Update</button>
                                                                        </div>`;
        }



    </script>



    <script>
        const fileInput = document.getElementById('import-file-id');
        var importedArray = [];
        var importedMonths = [];


        $(document).ready(function () {


            //start date validations
            $("#startDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDateInput = document.getElementById("endDate").value;

                if (endDateInput == "") return;
                if (endDateInput < startDate) {
                    Toaster(constant.endDateValidation, "error");
                    endDate = "";
                    document.getElementById("endDate").value = "";
                }
            })

            //enddate validations
            $("#endDate").on("change", function () {
                startDate = document.getElementById("startDate").value;
                endDate = document.getElementById("endDate").value;

                if (endDate < startDate) {
                    Toaster(constant.endDateValidation, "error");
                    document.getElementById("endDate").value = "";
                    endDate = "";
                }
            })

            //change income category name
            $(document).on("input", ".IncomeName", function () {
                var catIndex = $(this).data("incomeindex");
                var value = $(this).val();
                isChangeAfterExport = true;

            });

            //disable income name category
            $(document).on("change", ".IncomeName", function () {
                var value = $(this).val();
                var catIndex = $(this).data("incomeindex");
                for (i = 0; i < datasheetVM.incomeCategoryList.length; i++) {
                    if (datasheetVM.incomeCategoryList[i].catgeoryName == value) {
                        Toaster(constant.existingCategorynameMessage, "error")
                        this.value = "";
                        value = "";
                        this.focus();
                        return;
                    }
                }
                datasheetVM.incomeCategoryList[catIndex].catgeoryName = value;
                let row = document.getElementsByClassName("IncomeName")[catIndex].parentElement.parentElement;
                row.children[datasheetVM.monthList.length + 1].children[0].classList.remove("d-none");
                isChangeAfterExport = true;
                updateBudgetSheet();
                this.setAttribute("disabled", "disabled");
                fillActivityArray(constant.greenColor, constant.categoryAddActivityMessage(value, "Income"));
            });

            //change expense category name
            $(document).on("input", ".ExpenseName", function () {
                var catIndex = $(this).data("expenseindex");
                var value = $(this).val();

            });

            //disable expense name category
            $(document).on("change", ".ExpenseName", function () {
                var value = $(this).val();
                var catIndex = $(this).data("expenseindex");
                for (i = 0; i < datasheetVM.expenseCategoryList.length; i++) {
                    if (datasheetVM.expenseCategoryList[i].catgeoryName == value) {
                        Toaster(constant.existingCategorynameMessage, "error")
                        this.value = "";
                        value = "";
                        this.focus();
                        return;
                    }
                }
                datasheetVM.expenseCategoryList[catIndex].catgeoryName = value;
                let row = document.getElementsByClassName("ExpenseName")[catIndex].parentElement.parentElement;
                row.children[monthArray.length + 1].children[0].classList.remove("d-none");
                isChangeAfterExport = true;
                updateBudgetSheet();
                this.setAttribute("disabled", "disabled");
                fillActivityArray(constant.greenColor, constant.categoryAddActivityMessage(value, "Expense"));

                //add new row
                let obj = {
                        catgeoryName: "",
                        amount: new Array(datasheetVM.monthList.length).fill(0)
                    };
                datasheetVM.expenseCategoryList.push(obj);
                renderIncomeExpenseBody(false);
                console.log(document.getElementsByClassName("ExpenseInput")[(datasheetVM.monthList.length * catIndex)  ])

                document.getElementsByClassName("ExpenseInput")[ (datasheetVM.monthList.length * catIndex) ].focus()
                document.getElementsByClassName("ExpenseInput")[ (datasheetVM.monthList.length * catIndex) ].value = "0"
            });

            //change income input
            $(document).on("input", ".IncomeInput", function () {
                var amountindex = $(this).data("month");
                var catIndex = $(this).data("incomeindex");
                var value = $(this).val() == "" ? 0 : this.value.replace(/[^0-9.-]/g, '');
                console.log(value)
                if(value > 9999999999){
                    this.value = datasheetVM.incomeCategoryList[catIndex].amount[amountindex];
                    console.log(constant.limitValueMessage)
                    Toaster(constant.limitValueMessage, "error");
                    return;
                }
                this.value = value;

                if ($(this).val() == "" || value == '') {
                    this.value = 0;
                    value = 0;
                }
                datasheetVM.incomeCategoryList[catIndex].amount[amountindex] = parseFloat(parseFloat(value).toFixed(2));
                updateBudgetSheet();
            });

            //change expense input
            $(document).on("input", ".ExpenseInput", function () {
                var amountindex = $(this).data("month");
                var catIndex = $(this).data("expenseindex");
                var value = $(this).val() == "" ? 0 : this.value.replace(/[^0-9.-]/g, '');
                if(value > 9999999999){
                    this.value = datasheetVM.expenseCategoryList[catIndex].amount[amountindex];
                    console.log(constant.limitValueMessage)
                    Toaster(constant.limitValueMessage, "error");
                    return;
                }
                this.value = value;
                @* this.value = $(this).val() == "" ? 0 : parseInt($(this).val());
                if (value < 0) {
                    this.focus();
                    this.value = 0;
                    datasheetVM.expenseCategoryList[catIndex].amount[amountindex] = 0
                    updateBudgetSheet();
                    return;
                } *@
                    if ($(this).val() == "" || value == '') {
                    this.value = 0;
                    value = 0;
                }
                datasheetVM.expenseCategoryList[catIndex].amount[amountindex] = parseFloat(parseFloat(value).toFixed(2));
                updateBudgetSheet();
            });

            $(document).on("change", ".IncomeInput", function () {
                amountindex = $(this).data("month");
                var catIndex = $(this).data("incomeindex");
                var value = $(this).val() == "" ? 0 : parseFloat($(this).val());
                if (!isNaN(value)) {
                    const formatter = new Intl.NumberFormat();
                    console.log(new Intl.NumberFormat("en-IN").format(value))
                    this.value = new Intl.NumberFormat("en-IN").format(value);
                } else {
                    this.value = 0;
                }
                @* if (value < 0) {
                    this.focus();
                    this.value = 0;
                    datasheetVM.incomeCategoryList[catIndex].amount[amountindex] = 0;
                    updateBudgetSheet();
                    return;
                } *@
                    @* if (!isNaN(value)) {
                    const formatter = new Intl.NumberFormat();
                    console.log(formatter.format(value))
                    this.value = formatter.format(value);
                } else {
                    this.value = 0;
                } *@
                    var catgeoryName = datasheetVM.incomeCategoryList[catIndex].catgeoryName;
                fillActivityArray(constant.greenColor, constant.AddValueMessgae(catgeoryName, value, "Income", monthArray[amountindex]));
            });

            $(document).on("change", ".ExpenseInput", function (e) {
                e.preventDefault();
                amountindex = $(this).data("month");
                var catIndex = $(this).data("expenseindex");
                var value = $(this).val() == "" ? 0 : parseFloat($(this).val());
                if (!isNaN(value)) {
                    const formatter = new Intl.NumberFormat();
                    console.log(new Intl.NumberFormat("en-IN").format(value))
                    this.value = new Intl.NumberFormat("en-IN").format(value);
                } else {
                    this.value = 0;
                }
                @* if (value < 0) {
                    this.focus();
                    this.value = 0;
                    datasheetVM.expenseCategoryList[catIndex].amount[amountindex] = 0;
                    updateBudgetSheet();
                    return;
                } *@
                    var catgeoryName = datasheetVM.expenseCategoryList[catIndex].catgeoryName;
                fillActivityArray(constant.greenColor, constant.AddValueMessgae(catgeoryName, value, "Expense", monthArray[amountindex]));
                if (this == document.getElementsByClassName("ExpenseInput")[document.getElementsByClassName("ExpenseInput").length - 1]) {
                    console.log("hiiiii")
                    if(datasheetVM.expenseCategoryList[catIndex].value == ""){
                        document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
                        return;
                    }
                    let newCategory = {
                        catgeoryName: "",
                        amount: new Array(datasheetVM.monthList.length).fill(0)
                    };
                    datasheetVM.expenseCategoryList.push(newCategory);
                    renderIncomeExpenseBody(false);
                    setTimeout(function () {
                        console.log(document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1])
                        document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
                    }, 2000)
                }
            });

            //delete category
            $(document).on("click", ".deletedata", function () {
                var index = $(this).data("index");
                var isIncome = $(this).data("isincome");
                document.getElementById("cat-index").value = index;
                document.getElementById("is-income").value = isIncome;
                $("#delete-category").modal("show");
            });

            //add new category on enter key press or update if not
            $(document).on("keydown", ".inputClass", function (e) {
                if (e.keyCode == 13) {
                    if (e.target.classList.contains("IncomeName") || e.target.classList.contains("IncomeInput")) {
                        if (datasheetVM.incomeCategoryList[datasheetVM.incomeCategoryList.length - 1].catgeoryName == "") {
                            document.getElementsByClassName("IncomeName")[datasheetVM.incomeCategoryList.length - 1].focus();
                        } else {
                            addCategory(true);
                        }
                    } else {
                        if (datasheetVM.expenseCategoryList[datasheetVM.expenseCategoryList.length - 1].catgeoryName == "") {
                            document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
                        } else {
                            addCategory(false);
                        }
                    }
                } else {
                    updateBudgetSheet();
                }
            });

            //applu to all when right clicked
            $(document).on("contextmenu", ".input-data-number", function (e) {
                e.preventDefault();
                var catIndex;
                if (this.classList.contains("IncomeInput")) {
                    catIndex = $(this).data("incomeindex")
                } else {
                    catIndex = $(this).data("expenseindex")
                }

                var value = $(this).val();
                var month = $(this).data("month");

                $("#apply-to-all").modal("show");
                document.getElementById("cat-index-apply").value = catIndex;
                document.getElementById("value-apply").value = value;
                document.getElementById("month-apply").value = month;
                if (this.classList.contains("IncomeInput")) {
                    document.getElementById("is-income-apply").value = true;
                } else {
                    document.getElementById("is-income-apply").value = false;
                }
            });

            //import file modal
            $(document).on("show.bs.modal", "#import-file-modal", function () {
                if ($("#generate-btn-id").prop("disabled") == true) {
                    document.getElementById("import-message").innerHTML = `Data will be vanished after importing data from Excel file.</br> Do you want to continue?`;
                }
            });


            //display popover when when right click on income category name
            $(document).on("contextmenu", ".IncomeName", function (e) {
                e.preventDefault();
                console.log(document.getElementById("categoryIndexToUpdate"));
                document.getElementById("categoryIndexToUpdate").value = 0;
                document.getElementById("oldCategoryName").value = "";

                if ($(this).prop("disabled") == true) {
                    var value = $(this).val();
                    var catIndex = $(this).data("incomeindex");
                    document.getElementById("categoryIndexToUpdate").value = catIndex;
                    document.getElementById("oldCategoryName").value = value;
                    document.getElementById("isInputForUpdateCategory").value = true;
                    $('[data-toggle="popover"]').popover('hide');
                    // Show this one
                    var popover = new bootstrap.Popover(this, {
                        container: 'body',
                        html: true,
                        content: document.getElementById('mypopover-content'),
                    })
                    popover.show();
                    document.getElementById("sheetTableId").style.overflow = 'hidden';


                }
            })

            //display popover when when right click on expense category name
            $(document).on("contextmenu", ".ExpenseName", function (e) {
                e.preventDefault();
                document.getElementById("categoryIndexToUpdate").value = "";
                document.getElementById("oldCategoryName").value = "";

                if ($(this).prop("disabled") == true) {
                    var value = $(this).val();
                    var catIndex = $(this).data("expenseindex");
                    document.getElementById("categoryIndexToUpdate").value = catIndex;
                    document.getElementById("oldCategoryName").value = value;
                    document.getElementById("isInputForUpdateCategory").value = false;

                    $('[data-toggle="popover"]').popover('hide');
                    var popover = new bootstrap.Popover(this, {
                        container: 'body',
                        html: true,
                        content: document.getElementById('mypopover-content'),
                    })
                    popover.show();
                    document.getElementById("sheetTableId").style.overflow = 'hidden';
                }
            })

            //remove popover 
            $(document).on("click", function (e) {
                // Hide the popover if the click is outside the popover content
                if (!$(e.target).closest('.example-popover').length && !$(e.target).closest('#mypopover-content').length) {
                    $('*').popover('hide');
                    document.getElementById("sheetTableId").style.overflow = 'auto';
                    popoverContent();
                }
            });


        })
    </script>

    <script>
        let isPageReload = true;;


        $(document).on('keydown', function (e) {
            // F5 or Ctrl+R
            if ((e.which === 116) || (e.which === 82 && e.ctrlKey)) {
                e.preventDefault();
                if (!isPageReload) {

                    $('#confirmReloadModal').modal('show');
                }
            }
        });


        // User confirms reload
        $('#confirmReload').on('click', function () {
            isPageReload = true;
            $('#confirmReloadModal').modal('hide');
            location.reload();
        });

        // User cancels reload
        $('#cancelReload').on('click', function () {
            isPageReload = false;
            $('#confirmReloadModal').modal('hide');
        });
    </script>


    <partial name="_Toaster" />
}